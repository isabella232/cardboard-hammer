#!/usr/bin/env node
'use strict';

var meow = require('meow');
var fs = require('fs');
var Cardboard = require('cardboard');
var runHammer = require('..').runHammer;
var writeHammer = require('..').writeHammer;
var writeAndListHammer = require('..').writeAndListHammer;

if (require.main === module) {
  var cli = meow(`
      Usage:
        $ ./bin/hammer <hammer-func> feature.geojson

      Hammer functions:
        write -          repeatedly puts to the cardboard table
        write-and-list - writes records and continuously polls the listing until it shows up

      Options:
        -t, --time        Amount of time to hammer (e.g. 5s, 10m, 1h)
        -c, --concurrency Number of concurrent requests to send (default 10)
  `, {
    alias: {
      t: 'time',
      c: 'concurrency'
    }
  });

  var cmd = cli.input[0];

  var buffer = fs.readFileSync(cli.input[1]);
  var geojson = JSON.parse(buffer.toString());
  if (geojson.id) delete geojson.id;

  let hammerFunc;
  let datasetID;
  let logFunc;

  switch(cmd) {
    case 'write':
      datasetID = 'write-hammer-' + Date.now();
      hammerFunc = writeHammer;
      logFunc = writeLog;
      break;
    case 'write-and-list':
      datasetID = 'write-and-list-hammer-' + Date.now();
      hammerFunc = writeAndListHammer;
      logFunc = writeAndListLog;
      break;
    default:
      cli.showHelp(1);
      break;
  }

  hammerFunc.config({
    region: process.env.CardboardRegion,
    mainTable: process.env.CardboardFeaturesTable,
    listTable: process.env.CardboardListTable
  });

  const opts = {
    concurrency: cli.flags.concurrency && Number(cli.flags.concurrency),
    time: cli.flags.time && parseTime(cli.flags.time)
  };

  runHammer(hammerFunc.bind(this, geojson, datasetID), opts, logFunc);
}

function parseTime(val) {
  if (val.slice(-1) === 's') return val.slice(0, -1) * 1000;
  if (val.slice(-1) === 'm') return val.slice(0, -1) * 60 * 1000;
  if (val.slice(-1) === 'h') return val.slice(0, -1) * 60 * 60 * 1000;
  if (val.slice(-1) === 'd') return val.slice(0, -1) * 24 * 60 * 60 * 1000;
}

function writeLog(err, output) {
  if (err) throw err;
  console.log('\nResults:\n');
  console.log(`Size: ${buffer.length}`);
  console.log(`Writes: ${output.number}`);
  console.log(`Time: ${output.time}`);
  console.log(`Concurrency: ${output.concurrency}`);
  console.log(`Req/s: ${output.number / (output.time / 1000) }`);
  console.log(`Min Latency: ${output.min_latency}`);
  console.log(`Avg Latency: ${output.avg_latency}`);
  console.log(`Max Latency: ${output.max_latency}`);
  console.log(`Throttles: ${output.sum_throttles}`);
  process.exit(0);
}

function writeAndListLog(err, output) {
  if (err) throw err;
  console.log('\nResults:\n');
  console.log(`Size: ${buffer.length}`);
  console.log(`Successes: ${output.number}`);
  console.log(`Time: ${output.time}`);
  console.log(`Concurrency: ${output.concurrency}`);
  console.log(`Min Tries: ${output.min_tries}`);
  console.log(`Avg Tries: ${output.avg_tries}`);
  console.log(`Max Tries: ${output.max_tries}`);
  console.log(`Min Time To List: ${output.min_time_to_list}`);
  console.log(`Avg Time To List: ${output.avg_time_to_list}`);
  console.log(`Max Time To List: ${output.max_time_to_list}`);
  console.log(`Read Throttles: ${output.sum_read_throttles}`);
  process.exit(0);
}
